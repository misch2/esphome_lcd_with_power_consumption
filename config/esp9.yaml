---
substitutions:
  <<: !include include/base_substitutions.yaml
  devicename: esp9
  deviceip: 10.52.6.39
  board: esp32dev
  #  SCL = gray   = 32  // SPI clock
  #  SDA = violet = 33  // SPI data
  #  RES = blue   = 25  // Reset
  #  DC  = green  = 26
  #  CS  = yellow = 27
  #  BL  = orange = 14  // Backlight
  lcd_SCL: GPIO32
  lcd_SDA: GPIO33
  lcd_RES: GPIO25
  lcd_DC:  GPIO26
  lcd_CS:  GPIO27
  lcd_BL:  GPIO14   # not used anywhere in the code

esphome:
  name: $devicename

mqtt:
  # rpi2.local
  broker: !secret mqtt_server
  username: !secret mqtt_username
  password: !secret mqtt_password

# Sensors are exported to the HomeAssistant (e.g. config "homeassistant/sensor/esp9/total_home_power_consumption" MQTT topic for the first sensor and then "esp9/sensor/total_home_power_consumption/state" for the real data):
sensor:
  - platform: mqtt_subscribe
    name: "Immediate home power consumption"
    id: current_home_power_consumption
    unit_of_measurement: "W"
    device_class: "energy"
    accuracy_decimals: 1
    topic: shellies/shellyem-E868E7D2B1DE/emeter/0/power

spi:
  clk_pin: $lcd_SCL
  mosi_pin: $lcd_SDA
  #miso_pin: GPIO12 # unused

font:
  # gfonts://family[@weight]
  # - file: "gfonts://Roboto"
  #   id: roboto_normal
  #   size: 20
  # - file: "gfonts://Roboto"
  #   size: 30
  #   id: font_default
  - file: "gfonts://Roboto@bold"
    size: 32
    id: font_default_bold

# graph:
#   # Show bare-minimum auto-ranged graph
#   - id: single_power_graph
#     sensor: current_home_power_consumption
#     duration: 10min
#     width: 100
#     height: 80

display:
  - platform: st7735
    # https://esphome.io/components/display/st7735.html
    # pins definition
    model: "INITR_18BLACKTAB"
    reset_pin: $lcd_RES
    cs_pin: $lcd_CS
    dc_pin: $lcd_DC
    rotation: 0
    device_width: 128
    device_height: 160
    col_start: 2
    row_start: 1
    eight_bit_color: true
    update_interval: 1s
    # https://esphome.io/components/display/index.html
    # display content
    lambda: |-
      auto black = Color(0, 0, 0);
      auto white = Color(255, 255, 255);
      auto gray = Color(127, 127, 127);
      auto green = Color(0, 255, 0);
      auto green2 = Color(127, 255, 127);
      // auto orange = Color(255, 165, 0);
      auto orange = Color(192, 140, 0);
      auto graph_color = Color(128, 128, 255);

      // Draw a line from [0,0] to [100,50]
      // it.line(0, 0, 100, 50);
      // it.line(0, 0, 50, 100);
      // print text
      // it.print(0, 10, id(roboto_normal), "Hello World!");
      //it.line(it.get_width(), 0, 0, it.get_height(), green2);
      //it.line(0, 0, it.get_width(), it.get_height(), green);

      // sensor value:
      int x      = 10;
      int y      = 10;
      int width  = it.get_width() - (2*x);
      int height = 60;
      int spacex = 9;
      int spacey = 11;

      it.filled_rectangle(x, y, width, height, black);
      it.rectangle(x, y, width, height, gray);
      it.printf(x + spacex, y + spacey, id(font_default_bold), orange, "%.0f W", id(current_home_power_consumption).state);

      // it.graph(x + spacex, y + height + spacey, id(single_power_graph), graph_color);

esp32:
  board: $board

logger:
  level: WARN

# Include common settings
.dummy: !include &dummy include/base.yaml
<<: *dummy

# Individual Wi-Fi settings
wifi:
  <<: !include include/wifi.yaml
  # manual IP
  manual_ip:
    static_ip: $deviceip
    gateway: $gateway
    subnet: $subnet


