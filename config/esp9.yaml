---
substitutions:
  <<: !include include/base_substitutions.yaml
  devicename: esp9
  deviceip: 10.52.6.39
  board: esp32dev
  #  SCL = gray   = 32  // SPI clock
  #  SDA = violet = 33  // SPI data
  #  RES = blue   = 25  // Reset
  #  DC  = green  = 26
  #  CS  = yellow = 27
  #  BL  = orange = 14  // Backlight
  lcd_SCL: GPIO32
  lcd_SDA: GPIO33
  lcd_RES: GPIO25
  lcd_DC:  GPIO26
  lcd_CS:  GPIO27
  lcd_BL:  GPIO14
  czech_charset: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZáčďéěíňóřšťúůýžÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ0123456789 !?\"%()+,-./:=_°"
  main_circuit_breaker_amps: "25"
  voltage: "230"
  delay_backlight_off_seconds: "30"

# Include common settings
.dummy: !include &dummy include/base.yaml
<<: *dummy

esp32:
  board: $board

esphome:
  name: $devicename
  includes:
    - include/lcd_utils.h

# Enable for debugging only, not needed for functionality:
web_server:
  port: 80
  include_internal: True

# Enable Home Assistant API
api:
  encryption:
    key: !secret homeassistant_api_key

## https://esphome.io/components/sensor/index.html
#sensor:
#  - platform: homeassistant
#    entity_id: sensor.shellyem_e868e7d2b1de_channel_1_power
#    id: current_power_consumption
#    internal: True  # do not report this back to HA

# For some reason the MQTT is much faster than API (and the interval is configurable in Shelly settings):
mqtt:
  broker: !secret mqtt_server
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false  # do not publish sensors on MQTT, use it only for internal communication

sensor:
  - platform: mqtt_subscribe
    topic: "shellies/shellyem-E868E7D2B1DE/emeter/0/power"
    id: current_power_consumption
    internal: True  # do not report this back to HA
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 2

# output:
switch:
  - platform: gpio
    pin:
      number: $lcd_BL
      inverted: False
    name: "Podsvícení displeje monitoru spotřeby"
    id: lcd_backlight_control
    #entity_id: "switch.${devicename}_power_consumption_display_backlight"
    #restore_mode: ALWAYS_ON

time:
  - platform: homeassistant
    id: homeassistant_time

spi:
  clk_pin: $lcd_SCL
  mosi_pin: $lcd_SDA

font:
  - file: "gfonts://Roboto"
    size: 12
    id: font_small
    glyphs: $czech_charset 
  - file: "gfonts://Roboto@bold"
    size: 24
    id: font_large
#  - file: "gfonts://Roboto@bold"
#    size: 32
#    id: font_large_bold

display:
  - platform: st7735
    # https://esphome.io/components/display/st7735.html
    # pins definition
    model: "INITR_18BLACKTAB"
    reset_pin: $lcd_RES
    cs_pin: $lcd_CS
    dc_pin: $lcd_DC
    rotation: 180
    device_width: 128
    device_height: 160
    col_start: 2
    row_start: 1
    eight_bit_color: True
    update_interval: 1s
    # https://esphome.io/components/display/index.html
    # display content
    lambda: |-
      static bool prev_error = false;
      static auto timer_backlight_off = id(homeassistant_time).now().timestamp;

      auto now_timestamp = id(homeassistant_time).now().timestamp;

      auto color_ok_bg           = Color(0,   127, 0);
      auto color_ok_outline      = Color(127, 255, 127);
      auto color_ok_fg           = Color(255, 255, 255);

      auto color_warning_bg      = Color(127,  63, 0);
      auto color_warning_outline = Color(255,  63, 127);
      auto color_warning_fg      = Color(192, 192, 63);

      auto white                 = Color(255, 255, 255);

      float remaining_watts = $main_circuit_breaker_amps * $voltage;
      remaining_watts -= id(current_power_consumption).state;
      remaining_watts = floor(remaining_watts / 50) * 50;

      auto color_bg      = color_ok_bg;
      auto color_outline = color_ok_outline;
      auto color_fg      = color_ok_fg;

      int x      = 0;
      int y      = 88;
      int width  = 60;
      int height = 20;

      bool error = false;

      if (remaining_watts < 2570) {
        error = true;
        rounded_rectangle(&it, x, y, width, height, 3, color_warning_outline, color_warning_bg);
        it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Troubu");
      }
      x = 68;
      if (remaining_watts < 2400) {
        error = true;
        rounded_rectangle(&it, x, y, width, height, 3, color_warning_outline, color_warning_bg);
        it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Myčku");
      }

      y += 25;
      x  = 0;
      if (remaining_watts < 1200) {
        error = true;
        rounded_rectangle(&it, x, y, width, height, 3, color_warning_outline, color_warning_bg);
        it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Mikrovlnku");
      }
      x = 68;
      if (remaining_watts < 2100) {
        error = true;
        rounded_rectangle(&it, x, y, width, height, 3, color_warning_outline, color_warning_bg);
        it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Pračku");
      }

      y     += 25;
      x      = 0;
      //width  = 128;
      if (remaining_watts < 2400) {
        error = true;
        rounded_rectangle(&it, x, y, width, height, 3, color_warning_outline, color_warning_bg);
        //it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Rychlovarnou konvici");
        it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Konvici");
      }
      x = 68;
      if (remaining_watts < 1450) {
        error = true;
        rounded_rectangle(&it, x, y, width, height, 3, color_warning_outline, color_warning_bg);
        it.print(x + 3, y + 3, id(font_small), color_warning_fg, TextAlign::TOP_LEFT, "Kávovar");
      }

      x      = 0;
      y      = 0;
      width  = 128;
      height = 55;

      if (error) {
        color_bg      = color_warning_bg;
        color_outline = color_warning_outline;
        color_fg      = color_warning_fg;

        it.print(64, 65, id(font_small), white, TextAlign::TOP_CENTER, "NEZAPÍNAT:");
        timer_backlight_off = 0;
        id(lcd_backlight_control).turn_on();

        if (!prev_error) {
          // brand new error

          ESP_LOGD("warn", "Power consumption too high, power available = %.0f W", remaining_watts);
          ESP_LOGD("info", "turning backlight on, time=%d", now_timestamp);
        };
      } else {
        if (prev_error) {
          // brand new OK state

          ESP_LOGD("info", "Everything OK again, power available = %.0f W", remaining_watts);
          timer_backlight_off = id(homeassistant_time).now().timestamp;
        };
      }
      prev_error = error;

      if (timer_backlight_off != 0) {
        if ((now_timestamp - timer_backlight_off) > $delay_backlight_off_seconds) {
          ESP_LOGD("info", "turning backlight off, time=%d", now_timestamp);
          id(lcd_backlight_control).turn_off();
          timer_backlight_off = 0;
        }
      }

      rounded_rectangle(&it, x, y, width, height, 10, color_outline, color_bg);
      it.print (x + width/2, y+5,  id(font_small), color_fg, TextAlign::TOP_CENTER, "rezerva");
      it.printf(x + width/2, y+21, id(font_large), color_fg, TextAlign::TOP_CENTER, "%.0f W", remaining_watts);

logger:
  level: WARN

# Individual Wi-Fi settings
wifi:
  <<: !include include/wifi.yaml
  # manual IP
  manual_ip:
    static_ip: $deviceip
    gateway: $gateway
    subnet: $subnet


